pipeline {
    agent any
    
    environment{
        SCANNER_HOME= tool "sonar"
    }

    stages {
        stage('Jenkins: Clean Workspace ') {
            steps {
                cleanWs()
            }
        }
        
        stage("Git: Code Checkout"){
            steps{
                git url: "https://github.com/Nehabisen21/TWSThreeTierAppChallenge.git", branch: "main"
            }
        }
        
        stage("SonarQube: Code Analysis"){
            steps{
                withSonarQubeEnv("sonar"){
                 sh '''$SCANNER_HOME/bin/sonar-scanner -Dsonar.projectKey=threetierapp -Dsonar.projectName=threetierapp'''
                }
            }
        }

        stage("SonarQube: Code Quality Gates Check"){
            steps{
                timeout(time: 2, unit: "MINUTES"){
                    waitForQualityGate abortPipeline: true
                }
            }
        }

        stage("OWASP: Dependency Check"){
            steps{
                dependencyCheck additionalArguments: '--scan ./', odcInstallation: 'DC'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }

        stage("Trivy: File system Scan"){
            steps{
                sh 'trivy fs . > trivy-fs-report.txt'
            }
        }

        stage("Docker: Build image and push to AWS ECR"){
            steps{
                //ECR Login
                sh 'aws ecr-public get-login-password --region us-east-1 | docker login --username AWS --password-stdin public.ecr.aws/m5h4e3m3'

                //Docker Build
                sh 'docker build -t threetier .'
                
                //Docker tag
                sh 'docker tag threetier:latest public.ecr.aws/m5h4e3m3/threetier:latest'

                //Docker push
                sh 'docker push public.ecr.aws/m5h4e3m3/threetier:latest'
            }
        }
    }
}
